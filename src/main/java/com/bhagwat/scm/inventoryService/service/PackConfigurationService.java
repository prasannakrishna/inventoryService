package com.bhagwat.scm.inventoryService.service;
import com.bhagwat.scm.inventoryService.dto.PackConfigurationDto;
import com.bhagwat.scm.inventoryService.entity.PackConfiguration;

import com.bhagwat.scm.inventoryService.repository.PackingConfigurationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.common.errors.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * Service to handle the creation, update, and deletion of PackConfiguration items in PostgreSQL.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class PackConfigurationService {

    private final PackingConfigurationRepository packConfigurationRepository;

    /**
     * Creates a new PackConfiguration in the PostgreSQL database.
     *
     * @param packConfigurationDto The DTO containing PackConfiguration details.
     * @return The created PackConfiguration entity.
     */
    @Transactional
    public PackConfiguration createPackConfiguration(PackConfigurationDto packConfigurationDto) {
        log.info("Creating PackConfiguration: {}", packConfigurationDto.getPackConfigName());

        PackConfiguration packConfiguration = new PackConfiguration();
        // Map DTO to Entity based on the new structure
        // Note: id is typically auto-generated by the DB, so it's not set from DTO for creation
        packConfiguration.setPackConfigName(packConfigurationDto.getPackConfigName());
        packConfiguration.setTagVolume(packConfigurationDto.getTagVolume());
        packConfiguration.setEachVolume(packConfigurationDto.getEachVolume());
        packConfiguration.setTrackingLevel1(packConfigurationDto.getTrackingLevel1());
        packConfiguration.setTrackingLevel2(packConfigurationDto.getTrackingLevel2());
        packConfiguration.setTrackingRatio1To2(packConfigurationDto.getTrackingRatio1To2());
        packConfiguration.setTrackingLevel3(packConfigurationDto.getTrackingLevel3());
        packConfiguration.setTrackingRatio2To3(packConfigurationDto.getTrackingRatio2To3());
        packConfiguration.setTrackingLevel4(packConfigurationDto.getTrackingLevel4());
        packConfiguration.setTrackingRatio3To4(packConfigurationDto.getTrackingRatio3To4());
        packConfiguration.setTrackingLevel5(packConfigurationDto.getTrackingLevel5());
        packConfiguration.setTrackingRatio4To5(packConfigurationDto.getTrackingRatio4To5());
        packConfiguration.setLowestUnitWeight(packConfigurationDto.getLowestUnitWeight());
        packConfiguration.setTagVolumeWeight(packConfigurationDto.getTagVolumeWeight());
        packConfiguration.setTaggedAtLevel(packConfigurationDto.getTaggedAtLevel());
        packConfiguration.setHandlingUnitLevel(packConfigurationDto.getHandlingUnitLevel());

        PackConfiguration savedPackConfiguration = packConfigurationRepository.save(packConfiguration);
        log.info("PackConfiguration created successfully with ID: {}", savedPackConfiguration.getId()); // Use getId()
        return savedPackConfiguration;
    }

    /**
     * Retrieves a PackConfiguration by its ID.
     *
     * @param id The ID of the PackConfiguration.
     * @return The found PackConfiguration entity.
     * @throws ResourceNotFoundException if the PackConfiguration is not found.
     */
    public PackConfiguration getPackConfigurationById(Long id) {
        log.info("Fetching PackConfiguration with ID: {}", id);
        return packConfigurationRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("PackConfiguration not found with id: " + id));
    }

    /**
     * Retrieves all PackConfigurations.
     *
     * @return A list of all PackConfiguration entities.
     */
    public List<PackConfiguration> getAllPackConfigurations() {
        log.info("Fetching all PackConfigurations");
        return packConfigurationRepository.findAll();
    }

    /**
     * Updates an existing PackConfiguration.
     *
     * @param id The ID of the PackConfiguration to update.
     * @param packConfigurationDto The DTO containing updated details.
     * @return The updated PackConfiguration entity.
     * @throws ResourceNotFoundException if the PackConfiguration is not found.
     */
    @Transactional
    public PackConfiguration updatePackConfiguration(Long id, PackConfigurationDto packConfigurationDto) {
        log.info("Updating PackConfiguration with ID: {}", id);

        PackConfiguration existingPackConfiguration = packConfigurationRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("PackConfiguration not found with id: " + id));

        // Update fields from DTO to existing entity based on the new structure
        Optional.ofNullable(packConfigurationDto.getPackConfigName()).ifPresent(existingPackConfiguration::setPackConfigName);
        Optional.ofNullable(packConfigurationDto.getTagVolume()).ifPresent(existingPackConfiguration::setTagVolume);
        Optional.ofNullable(packConfigurationDto.getEachVolume()).ifPresent(existingPackConfiguration::setEachVolume);
        Optional.ofNullable(packConfigurationDto.getTrackingLevel1()).ifPresent(existingPackConfiguration::setTrackingLevel1);
        Optional.ofNullable(packConfigurationDto.getTrackingLevel2()).ifPresent(existingPackConfiguration::setTrackingLevel2);
        Optional.ofNullable(packConfigurationDto.getTrackingRatio1To2()).ifPresent(existingPackConfiguration::setTrackingRatio1To2);
        Optional.ofNullable(packConfigurationDto.getTrackingLevel3()).ifPresent(existingPackConfiguration::setTrackingLevel3);
        Optional.ofNullable(packConfigurationDto.getTrackingRatio2To3()).ifPresent(existingPackConfiguration::setTrackingRatio2To3);
        Optional.ofNullable(packConfigurationDto.getTrackingLevel4()).ifPresent(existingPackConfiguration::setTrackingLevel4);
        Optional.ofNullable(packConfigurationDto.getTrackingRatio3To4()).ifPresent(existingPackConfiguration::setTrackingRatio3To4);
        Optional.ofNullable(packConfigurationDto.getTrackingLevel5()).ifPresent(existingPackConfiguration::setTrackingLevel5);
        Optional.ofNullable(packConfigurationDto.getTrackingRatio4To5()).ifPresent(existingPackConfiguration::setTrackingRatio4To5);
        Optional.ofNullable(packConfigurationDto.getLowestUnitWeight()).ifPresent(existingPackConfiguration::setLowestUnitWeight);
        Optional.ofNullable(packConfigurationDto.getTagVolumeWeight()).ifPresent(existingPackConfiguration::setTagVolumeWeight);
        Optional.ofNullable(packConfigurationDto.getTaggedAtLevel()).ifPresent(existingPackConfiguration::setTaggedAtLevel);
        Optional.ofNullable(packConfigurationDto.getHandlingUnitLevel()).ifPresent(existingPackConfiguration::setHandlingUnitLevel);

        PackConfiguration updatedPackConfiguration = packConfigurationRepository.save(existingPackConfiguration);
        log.info("PackConfiguration updated successfully with ID: {}", updatedPackConfiguration.getId()); // Use getId()
        return updatedPackConfiguration;
    }

    /**
     * Deletes a PackConfiguration by its ID.
     *
     * @param id The ID of the PackConfiguration to delete.
     * @throws ResourceNotFoundException if the PackConfiguration is not found.
     */
    @Transactional
    public void deletePackConfiguration(Long id) {
        log.info("Deleting PackConfiguration with ID: {}", id);
        if (!packConfigurationRepository.existsById(id)) {
            throw new ResourceNotFoundException("PackConfiguration not found with id: " + id);
        }
        packConfigurationRepository.deleteById(id);
        log.info("PackConfiguration with ID: {} deleted successfully.", id);
    }
}
